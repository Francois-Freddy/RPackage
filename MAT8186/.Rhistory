}
dft1_iter(2,c(3+1i,7+4i))
dft1_iter <- function(k, x) {
Xk=c()
N <- length(x)
for(xN in 0:(N - 1)){
Xk = Xk + x[xN  + 1] * exp((1i*-2*pi*k*xN)/N)
}
return(Xk)
}
dft1_iter(2,c(3+1i,7+4i))
dft1_iter <- function(k, x) {
Xk=0
N <- length(x)
for(xN in 0:(N - 1)){
Xk = Xk + x[xN  + 1] * exp((1i*-2*pi*k*xN)/N)
}
return(Xk)
}
dft1_iter(2,c(3+1i,7+4i))
dft1_iter(2,c(3+1i,7+4i))
library(MAT8186)
MAT8186::dft1_iter(2,x)
fft(x)
fft(x)
MAT8186::dft1_iter(3,x)
library(MAT8186)
MAT8186::dft1_matrix (3,x)
MAT8186::dft1_matrix (3,x)
library(MAT8186)
MAT8186::dft1_matrix (3,x)
dft1_matrix <- function(k, x){as.matrix(as.complex(crossprod(x,exp((1i*-2*pi*k*(0:(length(x) - 1)))/(length(x))))))}
MAT8186::dft1_matrix (3,x)
MAT8186::dft1_matrix (5,x)
library(MAT8186)
MAT8186::dft1_matrix (3,x)
dft_factory <- function(F,x) {return(sapply(0:(length(x) - 1),FUN=F,x=x ))}
dft_factory(dft1_naive,x)
dft_factory <- function(F,x) {return(sapply(0:(length(x) - 1),FUN=F,x=x ))}
dft_factory(dft1_naive,x)
library(MAT8186)
MAT8186::dft_factory(dft1_naive,x)
library(MAT8186)
MAT8186::dft_naive(c(3+1i,7+4i))
library(MAT8186)
MAT8186::dft_iter (c(5+2i,9+1i))
fft(c(5+2i,9+1i))
library(MAT8186)
MAT8186::dft_matrix (c(5+2i,9+1i))
library(MAT8186)
MAT8186::dft_matrix (c(5+2i,9+1i))
MAT8186::dft1_matrix (3,x)
library(MAT8186)
library(MAT8186)::fib_mulPos_rec(5)
MAT8186::fib_mulPos_rec(5)
x
library(MAT8186)
library(MAT8186)
MAT8186::fft_ct2(c(1+1i,4+7i,6+9i,20+3i))
fft_ct2 <- function(x){
identical(ceiling(log2(length(x))), floor(log2(length(x)))) ||
stop("La longueur de x doit être une puissance de 2")
identical(length(x), 1L) && return(x)
N <- length(x)
z <- x
{
odd <- x[(1:(N/2))*2-1]
even <- x[(1:(N/2))*2]
z[1:(N/2)] <- fft_ct2(odd)
z[((N/2)+1):N] <- fft_ct2(even)
x[1:(N/2)] <- z[1:(N/2)] + exp(-1i*2*pi*(0:(N/2-1))/N) * z[(N/2+1):N]
x[((N/2)+1):N] <- z[1:(N/2)] - exp(-1i*2*pi*(0:(N/2-1))/N) * z[(N/2+1):N]
}
return(x)
}
library(MAT8186)
MAT8186::fft_ct2(c(1+1i,4+7i,6+9i,20+3i))
MAT8186::fftct2(c(1+1i,4+7i,6+9i,20+3i))
library(MAT8186)
library(MAT8186)
MAT8186::plynR(coefs=c(2,5,3))
#' @examples
library(MAT8186)
x=plynR(coefs=c(2,5,3))
print(x)
library(MAT8186)
p=plynR(coefs=c(2,5,3))
q=plynR(coefs=c(1,4,7))
MAT8186::plus(p,q)
library(MAT8186)
MAT8186::moins(p,q)
w=MAT8186::moins(p,q)
MAT8186::print(w)
library(MAT8186)
MAT8186::fois(p,q)
library(MAT8186)
MAT8186::fois(p,q)
library(MAT8186)
MAT8186::derive(p)
library(MAT8186)
MAT8186::derive(p)
library(MAT8186)
MAT8186::derive(p)
library(MAT8186)
MAT8186::derive(p)
library(MAT8186)
MAT8186::derive(p)
MAT8186::derive(p)
library(MAT8186)
library(MAT8186)
MAT8186::racines(p)
library(MAT8186)
MAT8186::summary.plynR(p)
MAT8186::summary(p)
library(MAT8186)
library(MAT8186)
library(MAT8186)
MAT8186::nombres_dec()
nombres_dec()[[1]]$x
decode(-34)
decode <- function(nb) {
op_match <- list("+", "-", "*", "/", "^")
cat(nb[["x"]], " = ", sep = "")
cat(nb[["chiffres"]][[1L]])
for (k in seq_along(nb[["ops"]]))
cat(" ",
op_match[[nb[["ops"]][k]]],
" ",
nb[["chiffres"]][k + 1L],
sep = "")
cat("\n")
}
decode(-34)
library(MAT8186)
MAT8186::res
MAT8186::res()
MAT8186::nombres_dec()
MAT8186::decode(n)
MAT8186::decode(nombres_dec()[[1]])
MAT8186::decode(nombres_dec()[[2]])
p
q
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
library(MAT8186)
MAT8186::rand_gen(x=c(2,5),trans=identity)
rand_gen(x=c(2,5),trans=identity)(2)
rand_gen(x=c(2,5),trans=identity)(5)
rand_gen(x=c(2,5),trans=identity)(5)
rand_gen(x=c(2,5),trans=identity)(5)
sim1=rand_gen(x=c(2,5),trans=identity)(5)
sim2=rand_gen(x=c(1,5,3,trans=identity)(5)
rand_sum(sim1,sim2)
rand_sum <- function(sim1,sim2) {
xs <- lapply(list(...), function(s) environment(s)[["x"]])
n <- Reduce(max, sapply(xs, length))
new_x <- Reduce(x = xs, init = numeric(n),
f = function(x, y) {
y <- c(y, numeric(n - length(y)))
x + y
})
rand_gen(new_x)
}
rand_sum <- function(sim1,sim2) {
xs <- lapply(list(...), function(s) environment(s)[["x"]])
n <- Reduce(max, sapply(xs, length))
new_x <- Reduce(x = xs, init = numeric(n),
f = function(x, y) {
y <- c(y, numeric(n - length(y)))
x + y
})
rand_gen(new_x)
}
rand_sum <- function(sim1,sim2) {
xs <- lapply(list(sim1,sim2), function(s) environment(s)[["x"]])
n <- Reduce(max, sapply(xs, length))
new_x <- Reduce(x = xs, init = numeric(n),
f = function(x, y) {
y <- c(y, numeric(n - length(y)))
x + y
})
rand_gen(new_x)
}
rand_sum(sim1,sim2)
sim2=rand_gen(x=c(1,5,3,trans=identity)(5)
)
rand_sum <- function(...) {
xs <- lapply(list(...), function(s) environment(s)[["x"]])
n <- Reduce(max, sapply(xs, length))
new_x <- Reduce(x = xs, init = numeric(n),
f = function(x, y) {
y <- c(y, numeric(n - length(y)))
x + y
})
rand_gen(new_x)
}
rand_sum(sim1(2),sim2(3))
sim1=rand_gen(x=c(2,5),trans=identity)
sim1(5)
sim2=rand_gen(x=c(2,0),trans=identity)
rand_sum(sim1(2),sim2(3))
rand_sum(sim1(2),sim2(2))
rand_sum(sim1,sim2)
rand_gen(x=c(2,5),trans=identity)
rand_gen(x=c(2,5),trans=identity)(3)
sim1=rand_gen(x=c(2,5),trans=identity)(3)
sim2=rand_gen(x=c(1,7,9),trans=identity)(5)
rand_sum(sim1,sim2)
sim1=rand_gen(x=c(2,5),trans=identity)(3)
sim2=rand_gen(x=c(2,5),trans=identity)(3)
rand_sum(sim1,sim2)
rand_gen <- function(x,trans=identity) {
trans_vect <- Vectorize(trans)
counter <- as.table(rep(0L, length(x)))
names(counter) <- lapply(seq(0L, length.out = length(x)),FUN=trans)
red<- function(f, x) {
out <- x[[1]]
for(i in seq(2, length(x))) {
out <- f(out, x[[i]])
}
out
}
red=red(f=sum, x)
redc= Reduce(f = "+", x , accumulate = TRUE)
function(n) {
ret <- lapply(sapply(runif(n), function(y) sum(y > redc*(red^-1))),FUN=trans)
counter <<- counter + table(factor(ret, names(counter)))
ret
}
}
rand_gen(x=c(2,7),trans=identity)
rand_gen(x=c(2,7),trans=identity)(3)
rand_gen(x=c(2,7),trans=identity)(3)
as.vector(rand_gen(x=c(2,7),trans=identity)(3))
rand_gen <- function(x,trans=identity) {
trans_vect <- Vectorize(trans)
counter <- as.table(rep(0L, length(x)))
names(counter) <- lapply(seq(0L, length.out = length(x)),FUN=trans)
red<- function(f, x) {
out <- x[1]
for(i in seq(2, length(x))) {
out <- f(out, x[i])
}
out
}
red=red(f=sum, x)
redc= Reduce(f = "+", x , accumulate = TRUE)
function(n) {
ret <- lapply(sapply(runif(n), function(y) sum(y > redc*(red^-1))),FUN=trans)
counter <<- counter + table(factor(ret, names(counter)))
ret
}
}
as.vector(rand_gen(x=c(2,7),trans=identity)(3))
rand_gen(x=c(2,7),trans=identity)(3)
rand_gen(x=c(2,7),trans=identity)(3)
rand_gen <- function(x,trans=identity) {
trans_vect <- Vectorize(trans)
counter <- as.table(rep(0L, length(x)))
names(counter) <- lapply(seq(0L, length.out = length(x)),FUN=trans)
red= Reduce(f = "+", x , accumulate = FALSE)
redc= Reduce(f = "+", x , accumulate = TRUE)
function(n) {
ret <- lapply(sapply(runif(n), function(y) sum(y > redc*(red^-1))),FUN=trans)
counter <<- counter + table(factor(ret, names(counter)))
ret
}
}
rand_gen(x=c(2,7),trans=identity)(3)
rand_gen <- function(x,trans=identity) {
trans_vect <- Vectorize(trans)
counter <- as.table(rep(0L, length(x)))
names(counter) <- lapply(seq(0L, length.out = length(x)),FUN=trans)
red= Reduce(f = "+", x , accumulate = FALSE)
redc= Reduce(f = "+", x , accumulate = TRUE)
function(n) {
ret <- lapply(sapply(runif(n), function(y) sum(y > redc*(red^-1))),FUN=trans)
counter <<- counter + table(factor(ret, names(counter)))
unlist(ret)
}
}
rand_gen(x=c(2,7),trans=identity)(3)
rand_gen <- function(x,trans=identity) {
trans_vect <- Vectorize(trans)
counter <- as.table(rep(0L, length(x)))
names(counter) <- lapply(seq(0L, length.out = length(x)),FUN=trans)
red<- function(f, x) {
out <- x[1]
for(i in seq(2, length(x))) {
out <- f(out, x[i])
}
out
}
red=red(f=sum, x)
redc= Reduce(f = "+", x , accumulate = TRUE)
function(n) {
ret <- lapply(sapply(runif(n), function(y) sum(y > redc*(red^-1))),FUN=trans)
counter <<- counter + table(factor(ret, names(counter)))
unlist(ret)
}
}
rand_gen(x=c(2,7),trans=identity)(3)
rand_gen(x=c(2,7),trans=identity)(3)
rand_gen(x=c(2,7),trans=identity)(3)
rand_trans <- function(sim, trans) {rand_gen(environment(sim)[["x"]],trans)}
rand_trans(rand_gen(x=c(2,5),trans=identity)(3),trans=identity)
rand_gen(x=c(2,7))(3)
rand_gen(x=c(2,7))(3)
rand_gen(x=c(2,7))(3)
rand_trans(rand_gen(x=c(2,5))(3),trans=identity)
rand_trans(rand_gen(x=c(2,5))(3),trans=identity)(3)
rand_sum <- function(sim1,sim2) {
xs <- lapply(list(args), function(s) environment(s)[["x"]])
n <- Reduce(max, sapply(xs, length))
new_x <- Reduce(x = xs, init = numeric(n),
f = function(x, y) {
y <- c(y, numeric(n - length(y)))
x + y
})
rand_gen(new_x)
}
sim1=rand_gen(x=c(2,5))(3)
sim2=rand_gen(x=c(1,7,9))(5)
rand_sum(sim1,sim2)
rand_sum(sim1,sim2) (8)
rand_sum(sim1,sim2) (8)
rand_sum(sim1,sim2) (8)
rand_sum(sim1,sim2) (8)
rand_sum(sim1,sim2) (8)
rand_sum(sim1,sim2) (8)
rand_sum(sim1,sim2) (5)
rand_sum(sim1,sim2) (5)
rand_sum(sim1,sim2) (5)
rand_sum(sim1,sim2) (5)
rand_sum(sim1,sim2) (5)
rand_sum(sim1,sim2) (5)
rand_sum(sim1,sim2) (5)
rand_sum(sim1,sim2) (5)
rand_sum(sim1,sim2) (5)
rand_sum(sim1,sim2) (5)
rand_sum(sim1,sim2) (5)
rand_sum(sim1,sim2)
rand_sum(sim1,sim2)(2)
rand_sum(sim1,sim2)(2)
sim2=rand_gen(x=c(1,7,9))(5)
sim2
rand_trans(rand_gen(x=c(2,5)),trans=identity)(3)
sim1=rand_gen(x=c(2,5))
sim2=rand_gen(x=c(1,7,9))
rand_sum(sim1,sim2)(3)
rand_sum(sim1,sim2)(3)
rand_sum(sim1,sim2)(3)
rand_sum(sim1(2),sim2(3))
rand_sum(sim1(2),sim2(3))(2)
rand_sum(sim1(2),sim2(3))(5)
sim1=rand_gen(x=c(2,5))(3)
sim2=rand_gen(x=c(1,7,9))(2)
rand_sum(sim1,sim2)
rand_sum(sim1,sim2)(5)
rand_sum(sim1,sim2)(1)
sim1
sim2
sim1=rand_gen(x=c(2,5))
sim2=rand_gen(x=c(1,7,9))
rand_sum(sim1,sim2)
rand_sum(sim1,sim2)(2)
rand_sum(sim1,sim2)(c(2,5))
rand_sum(sim1,sim2)(c(2,5))
rand_sum(sim1,sim2)(c(2,5))
#' rand_stats
#'
#'rand_stats est une fonction retournant un vecteur contenant la proportion de chacun des nombres générés jusqu’à maintenant
#' @param sim est un simulateur
#'
#' @return un vecteur contenant la proportion de chacun des nombres générés jusqu’à maintenant
#' @export
#'
#' @examples
#' rand_stats(sim1=rand_gen(x=c(2,5)))
rand_stats <- function(sim) {proportions(environment(sim)[["counter"]])}
rand_stats(sim1=rand_gen(x=c(2,5)))
rand_stats(rand_gen(x=c(2,5)))
rand_stats(rand_gen(x=c(2,5)))
rand_stats(rand_gen(x=c(2,5)))
#' rand_hist
#'
#' @param sim un simulateur
#'
#' @return un histogramme des valeurs générées jusqu’à maintenant par un simulateur
#' @export
#'
#' @examples
#' rand_hist(rand_gen(x=c(2,5)))
rand_hist <- function(sim) {barplot(rand_stats(sim), space = 0L)}
rand_hist(rand_gen(x=c(2,5)))
rand_hist(rand_stats(sim1=rand_gen(x=c(2,5))))
rand_stats(rand_gen(x=c(2,5)))
#' rand_hist
#'
#' @param sim un simulateur
#'
#' @return un histogramme des valeurs générées jusqu’à maintenant par un simulateur
#' @export
#'
#' @examples
#' rand_hist(rand_stats(rand_gen(x=c(2,5))))
rand_hist <- function(sim) {barplot(rand_stats(sim), space = 0L)}
rand_hist(rand_stats(rand_gen(x=c(2,5))))
rand_hist(rand_gen(x=c(2,5,7)))
sim=rand_gen(x=c(2,5))
sim
sim=rand_gen(x=c(2,5))(100)
sim
rand_hist(sim)
rand_stats(sim)
rand_stats(sim(5))
sim=rand_gen(x=c(2,5))(100)
sim
rand_stats(sim)
#' @examples
#' sim=rand_gen(x=c(2,5),trans=identity)(100)
#' rand_hist(sim)
rand_hist <- function(sim) {barplot(rand_stats(sim), space = 0L)}
sim=rand_gen(x=c(2,5),trans=identity)(100)
rand_hist(sim)
#' sim=rand_gen(x=c(2,5,5,1),trans=identity)(100)
#' rand_hist(sim)
rand_hist <- function(sim) {barplot(rand_stats(sim), space = 0L)}
sim=rand_gen(x=c(2,5,5,1),trans=identity)(100)
rand_hist(sim)
rand_gen(x=c(2,5),trans=identity)
rand_gen(x=c(2,5),trans=identity)(9)
rand_trans <- function(sim, trans) {rand_gen(environment(sim)[["x"]],trans)}
rand_stats(rand_gen(x=c(2,5),trans=identity)(9))
rand_stats(rand_gen(x=c(2,5),trans=identity)
)
rand_stats(rand_gen(x=c(2,5),trans=identity) )
rand_stats(rand_gen(x=c(2,5,5,4),trans=identity) )
rand_stats(rand_gen(x=c(2,5,5,4),trans=identity) )
rand_stats(rand_gen(x=c(2,5,5,4),trans=identity) )
barplot(rand_stats(rand_gen(x=c(2,5,5,4),trans=identity) ))
rand_hist(rand_stats(rand_gen(x=c(2,5,5,4),trans=identity) ))
rand_stats(rand_gen(x=c(2,5,5,4),trans=identity) )(1:5)
rand_stats(rand_gen(x=c(2,5,5,4),trans=identity) )(c(1:5))
sim=rand_gen(x=c(2,5,5,9),trans=identity)
rand_hist <- function(sim) {barplot(rand_stats(sim), space = 0L)}\
rand_hist <- function(sim) {barplot(rand_stats(sim), space = 0L)}
rand_hist(sim)
rand_hist(sim(5))
sim
sim(20)
rand_hist(sim(20))
rand_stats(sim)
rand_hist(sim)
sim
rand_hist(sim)
rand_hist(sim)
a=sim
sim.1=rand_gen(x=c(2,5,9,7,6),trans=identity)
sim.1
rand_hist(sim.1)
rand_gen(x=c(2,5,9,7,6),trans=identity)
sim=rand_gen(x=c(2,5,9,7,6),trans=identity)
rand_hist(sim)
sim=rand_gen(x=c(2,5,5,1),trans=identity)(100)
rand_hist(sim)
sim=rand_gen(x=c(2,5,5,1),trans=identity)
rand_hist(sim)
rand_gen <- function(x,trans=identity) {
trans_vect <- Vectorize(trans)
counter <- as.table(rep(0L, length(x)))
names(counter) <- lapply(seq(0L, length.out = length(x)),FUN=trans)
red<- function(f, x) {
out <- x[1]
for(i in seq(2, length(x))) {
out <- f(out, x[i])
}
out
}
red=red(f=sum, x)
redc= Reduce(f = "+", x , accumulate = TRUE)
function(n) {
ret <- lapply(sapply(runif(n), function(y) sum(y > redc*(red^-1))),FUN=trans)
counter <<- counter + table(factor(ret, names(counter)))
unlist(ret)
}
}
rand_gen(x,trans=identity)
rand_gen(x=c(2,5,9,7,6),trans=identity)
sim=rand_gen(x=c(2,5,9,7,6),trans=identity)
sim(20)
rand_hist(sim)
#' rand_hist
#'
#' une fonction qui affiche l’histogramme des valeurs générées jusqu’à maintenant par un simulateur
#' @param sim un simulateur
#'
#' @return un histogramme des valeurs générées jusqu’à maintenant par un simulateur
#' @export
#' @importFrom graphics barplot
#'
#' @examples
#' sim=rand_gen(x=c(2,5,9,7,6),trans=identity)
#' sim(20)
#' rand_hist(sim)
rand_hist <- function(sim) {barplot(rand_stats(sim), space = 0L)}
rand_hist(sim)
rand_stats(sim)
rand_stats(sim)
source('~/RPackage/MAT8186/R/rand_gen.R', encoding = 'UTF-8', echo=TRUE)
library(roxygen2)
library(devtools)
load_all()
